<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="1" time="0.955" timestamp="2021-12-10T14:40:49.662674" hostname="DESKTOP-S2LA16V"><testcase classname="testsuite.test_uums_query.TestCase_uums_query" name="test_post_data_api[param0-\u4fe1\u606f\u5b8c\u6574\u4e14\u6b63\u786e-expect0]" file="testsuite\test_uums_query.py" line="16" tester="zhangwenke" time="0.568"><properties><property name="outcome" value="NBPLUS" /></properties><failure message="assert &quot;code不在{'id':...49.956864'}之中&quot; == 200&#10;  +&quot;code不在{'id': 5, 'name': '张奔', 'sex': 1, 'statue': 1, 'department': '信息部门', 'position': '项目助理', 'telephone': '13212342345', 'create_time': '2021-12-10T14:40:49.956662', 'update_time': '2021-12-10T14:40:49.956864'}之中&quot;&#10;  -200">self = &lt;testsuite.test_uums_query.TestCase_uums_query object at 0x0000016C3A783FA0&gt;
param = {'department': '信息部门', 'name': '张奔', 'position': '项目助理', 'sex': 1, ...}
desc = '信息完整且正确', expect = {'code': 200}
json_template = &lt;function json_template.&lt;locals&gt;.read_template_by_test_name at 0x0000016C3A7775B0&gt;

    @pytest.mark.parametrize("param,desc,expect", [[{'sex': 1, 'position': '项目助理', 'telephone': '13212342345', 'statue': 1, 'department': '信息部门', 'name': '张奔'}, '信息完整且正确', {'code': 200}]])
    @allure.story("Case:POST请求数据")
    @allure.severity("critical")
    def test_post_data_api(self,param,desc,expect,json_template):
        """None"""
        with allure.step("step:生成测试数据"):
            case = json_template(**param)
            allure.attach(json.dumps(case,indent=4,ensure_ascii=False),"配置信息",allure.attachment_type.JSON)
        with allure.step("step:函数调用"):
            data_ = case.get('data')
            data = format_object.format_(data_)
            allure.attach(json.dumps(data,indent=4,ensure_ascii=False),"请求入参",allure.attachment_type.JSON)
        with allure.step(f"step:请求url: {case.get('url')}"):
            if case.get('method').lower()=='post':
                res = requests.post(url=case.get('url'),headers=case.get('headers'), data=data)
            else:
                res = requests.get(url=case.get('url'),headers=case.get('headers'), params=data)
        with allure.step("step:请求断言"):
            try:
                response_data = json.loads(res.content)
            except Exception as e:
                assert False,"响应码为%s,数据返回失败，原因如：%s" % (res.status_code,str(e))
            else:
                for k,v in expect.items():
&gt;                   assert parser_response(k,response_data) == v
E                   assert "code不在{'id':...49.956864'}之中" == 200
E                     +"code不在{'id': 5, 'name': '张奔', 'sex': 1, 'statue': 1, 'department': '信息部门', 'position': '项目助理', 'telephone': '13212342345', 'create_time': '2021-12-10T14:40:49.956662', 'update_time': '2021-12-10T14:40:49.956864'}之中"
E                     -200

test_uums_query.py:41: AssertionError</failure></testcase></testsuite></testsuites>