# Generated by Django 2.2.3 on 2021-08-29 11:16

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(blank=True, max_length=255, null=True, verbose_name='邮箱')),
                ('password', models.CharField(help_text='\n                                <a href="../password/" class="btn btn-danger btn-sm" role="button">Reset Password</a>\n                                ', max_length=128, verbose_name='password')),
                ('is_superuser', models.SmallIntegerField(choices=[(0, '否'), (1, '是')], default=0, help_text='\n    \n    <div class="alert alert-warning border-0 bg-info alert-dismissible fade show py-2">\n        <div class="d-flex align-items-center">\n            <div class="font-35 text-dark"><i class=\'bx bx-info-square\'></i>\n            </div>\n            <div class="ms-3">\n                <h6 class="mb-0 text-dark">Info Alerts</h6>\n                <div class="text-dark">管理员有所有表操作的权限，慎重勾选！</div>\n            </div>\n        </div>\n        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n    </div>\n    \n    ', verbose_name='超级用户')),
                ('user_id', models.CharField(max_length=32, unique=True, verbose_name='用户ID')),
                ('name', models.CharField(max_length=32, verbose_name='用户名')),
                ('is_active', models.SmallIntegerField(choices=[(0, '否'), (1, '是')], default=1, verbose_name='活动状态')),
                ('sex', models.SmallIntegerField(choices=[(0, '男'), (1, '女'), (2, '未知')], default=2, verbose_name='性别')),
                ('study', models.SmallIntegerField(choices=[(0, '未知'), (1, '高中'), (3, '大专'), (4, '本科'), (5, '研究生'), (6, '博士生')], default=0, verbose_name='学历')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='static/picture/photo/', verbose_name='头像')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='出生年月')),
                ('address', models.CharField(blank=True, max_length=320, null=True, verbose_name='现居地址')),
                ('school', models.CharField(blank=True, max_length=320, null=True, verbose_name='毕业院校')),
                ('skills', models.CharField(blank=True, max_length=320, null=True, verbose_name='技能')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建日期')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新日期')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name_plural': '用户信息表',
                'permissions': (('web_table_data', '可以允许访问表中数据'), ('web_table_data_batch_operation', '可以批量操作表中数据'), ('web_table_update_view', '可以允许访问修改页'), ('web_table_update', '可以允许更新数据'), ('web_table_add', '可以允许新增数据'), ('web_table_add_view', '可以允许访问新增数据页面'), ('web_table_delete', '可以允许删除数据'), ('web_table_delete_view', '可以允许访问删除数据页面'), ('password_reset_get', '可以允许访问修改密码页面'), ('password_reset_post', '可以允许访修改密码')),
            },
        ),
        migrations.CreateModel(
            name='BusinessFunc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='名称')),
                ('expression', models.CharField(max_length=64, unique=True, verbose_name='表达式')),
                ('parameter', models.CharField(blank=True, help_text='\n        <span style="color:orange;" class="glyphicon glyphicon-question-sign">参数之间用分隔符"|"分离，例如：username|password </span>\n    ', max_length=128, null=True, verbose_name='入参')),
                ('param_type', models.PositiveIntegerField(choices=[(0, 'String'), (1, 'Dict'), (2, 'List'), (3, 'Int'), (4, 'Boolean'), (5, 'None')], default=0, verbose_name='类型')),
                ('return_data_type', models.PositiveIntegerField(choices=[(0, 'String'), (1, 'Dict'), (2, 'List'), (3, 'Int'), (4, 'Boolean'), (5, 'None')], default=5, verbose_name='类型')),
                ('param_desc', models.TextField(blank=True, max_length=320, null=True, verbose_name='参数解释')),
                ('return_type', models.CharField(max_length=120, null=True, verbose_name='返回结果类型')),
                ('description', models.CharField(max_length=128, verbose_name='描述')),
                ('type', models.SmallIntegerField(choices=[(0, 'API'), (1, 'Common')], default=1, verbose_name='类型')),
                ('statue', models.SmallIntegerField(choices=[(0, '作废'), (1, '有效')], default=1, verbose_name='状态')),
            ],
            options={
                'verbose_name_plural': '业务函数',
            },
        ),
        migrations.CreateModel(
            name='CN_EN_MAP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parent', models.CharField(max_length=64, unique=True, verbose_name='字段英文简称')),
                ('cn_name', models.CharField(max_length=128, verbose_name='字段中文简称')),
                ('children', models.CharField(blank=True, help_text='\n        <span style="color:gray;font-size:smaller;" class="glyphicon glyphicon-question-sign">填写子列表，譬如主字段为：Username，则此处填写为:UserName;USER;USERNAME;username;UserNm，子元素之间用";"隔开 </span>\n    ', max_length=320, null=True, verbose_name='子列表')),
                ('statue', models.SmallIntegerField(choices=[(0, '作废'), (1, '有效')], default=1, verbose_name='状态')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建日期')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新日期')),
            ],
            options={
                'verbose_name_plural': '中英文字段映射',
            },
        ),
        migrations.CreateModel(
            name='Dbinfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='数据库简介')),
                ('dbtype', models.SmallIntegerField(choices=[(0, 'Mysql'), (1, 'Oracle'), (2, 'Other')], default=1, verbose_name='数据库类型')),
                ('dbhost', models.CharField(blank=True, max_length=64, null=True, verbose_name='数据库地址')),
                ('dbport', models.CharField(blank=True, default=3306, max_length=64, null=True, verbose_name='数据区端口号')),
                ('dbname', models.CharField(blank=True, max_length=64, null=True, verbose_name='数据库名称')),
                ('dbuser', models.CharField(blank=True, max_length=64, null=True, verbose_name='数据库账户')),
                ('dbpassword', models.CharField(blank=True, max_length=64, null=True, verbose_name='数据库密码')),
            ],
            options={
                'verbose_name_plural': '数据库信息',
            },
        ),
        migrations.CreateModel(
            name='Environment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('envir_id', models.CharField(max_length=64, unique=True, verbose_name='环境ID')),
                ('name', models.CharField(max_length=64, verbose_name='名称')),
            ],
            options={
                'verbose_name_plural': '应用环境',
            },
        ),
        migrations.CreateModel(
            name='FirstLayerMenu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.SmallIntegerField(choices=[(0, 'api'), (1, 'public')], default=1, verbose_name='类型')),
                ('name', models.CharField(max_length=64, verbose_name='一层菜单名')),
                ('icon', models.CharField(default='glyphicon glyphicon-blackboard', max_length=64, verbose_name='图标')),
                ('url_type', models.SmallIntegerField(choices=[(0, '相关的名字'), (1, '固定的URL')], default=0, verbose_name='URL类型')),
                ('url_name', models.CharField(max_length=64, verbose_name='一层菜单路径')),
                ('order', models.SmallIntegerField(default=0, verbose_name='菜单排序')),
            ],
            options={
                'verbose_name_plural': '第一层菜单',
            },
        ),
        migrations.CreateModel(
            name='Groups',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.Group')),
                ('description', models.CharField(blank=True, max_length=320, null=True, verbose_name='描述')),
            ],
            options={
                'verbose_name_plural': '权限组',
            },
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='LogServerinfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='日志服务器名称')),
                ('logserver', models.CharField(blank=True, max_length=64, null=True, verbose_name='日志服务器地址')),
                ('logport', models.CharField(blank=True, default=22, max_length=64, null=True, verbose_name='日志服务器端口号')),
                ('logname', models.CharField(blank=True, max_length=64, null=True, verbose_name='日志服务器登录用户')),
                ('logpwd', models.CharField(blank=True, max_length=64, null=True, verbose_name='日志服务器登录密码')),
            ],
            options={
                'verbose_name_plural': '日志服务器名称',
            },
        ),
        migrations.CreateModel(
            name='Retrieval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='名称')),
                ('link', models.CharField(blank=True, help_text='\n        <span style="color:orange;" class="glyphicon glyphicon-question-sign"> 例如：/login </span>\n    ', max_length=64, null=True, verbose_name='链接')),
                ('statue', models.SmallIntegerField(choices=[(0, '作废'), (1, '有效')], default=1, verbose_name='状态')),
            ],
            options={
                'verbose_name_plural': '全文检索',
            },
        ),
        migrations.CreateModel(
            name='StepLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.CharField(max_length=16, verbose_name='操作用户')),
                ('action', models.CharField(max_length=8, verbose_name='类型')),
                ('model_name', models.CharField(max_length=32, verbose_name='表信息')),
                ('origin', models.CharField(blank=True, max_length=640, null=True, verbose_name='原始数据')),
                ('detail', models.CharField(max_length=640, verbose_name='操作详情')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='操作日期')),
            ],
            options={
                'verbose_name_plural': '操作记录表',
            },
        ),
        migrations.CreateModel(
            name='SubMenu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.SmallIntegerField(choices=[(0, 'api'), (1, 'public')], default=1, verbose_name='类型')),
                ('name', models.CharField(max_length=64, verbose_name='二层菜单名')),
                ('url_type', models.SmallIntegerField(choices=[(0, '相关的名字'), (1, '固定的URL')], default=0, verbose_name='URL类型')),
                ('url_name', models.CharField(max_length=64, verbose_name='二层菜单路径')),
                ('order', models.SmallIntegerField(default=0, verbose_name='菜单排序')),
            ],
            options={
                'verbose_name_plural': '第二层菜单',
            },
        ),
        migrations.CreateModel(
            name='TodoList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=32, verbose_name='代办内容')),
                ('statue', models.SmallIntegerField(choices=[(0, '未完成'), (1, '已完成')], default=0, verbose_name='状态')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建日期')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rolename', models.CharField(max_length=64, unique=True, verbose_name='角色名称')),
                ('statue', models.SmallIntegerField(choices=[(0, '作废'), (1, '有效')], default=1, verbose_name='状态')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建日期')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新日期')),
                ('menus', models.ManyToManyField(blank=True, to='public.FirstLayerMenu', verbose_name='一层菜单')),
            ],
            options={
                'verbose_name_plural': '角色表',
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='名称')),
                ('link', models.CharField(blank=True, default='#', help_text='\n        <span style="color:orange;" class="glyphicon glyphicon-question-sign"> 例如：/login </span>\n    ', max_length=64, null=True, verbose_name='链接')),
                ('upload', models.FileField(blank=True, help_text='<span style="color:orange;" class="glyphicon glyphicon-question-sign">.svg/.png/.jpeg格式 </span>', null=True, upload_to='static/picture/icon/', verbose_name='图片路径')),
                ('type', models.SmallIntegerField(choices=[(0, 'api'), (1, 'public')], default=1, verbose_name='类型')),
                ('color', models.SmallIntegerField(choices=[(0, 'default'), (1, 'primary'), (2, 'info'), (3, 'success'), (4, 'danger'), (5, 'warning')], default=1, verbose_name='颜色')),
                ('remark', models.CharField(blank=True, max_length=640, null=True, verbose_name='描述')),
                ('parent_menus', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='public.FirstLayerMenu', verbose_name='所属一级菜单')),
            ],
            options={
                'verbose_name_plural': '菜单图标管理',
            },
        ),
        migrations.AddField(
            model_name='firstlayermenu',
            name='sub_menus',
            field=models.ManyToManyField(blank=True, to='public.SubMenu'),
        ),
        migrations.CreateModel(
            name='Configurations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('loglevel', models.SmallIntegerField(choices=[(0, 'info'), (1, 'debug'), (2, 'warning'), (3, 'error')], default=0, verbose_name='日志级别')),
                ('browserType', models.SmallIntegerField(choices=[(0, 'Chrome'), (1, 'Firefox'), (2, 'IE'), (3, 'Self-defined')], default=0, verbose_name='浏览器')),
                ('is_task', models.BooleanField(default=0, verbose_name='是否默认添加定时任务')),
                ('task', models.DateTimeField(default='20:00', max_length=64, verbose_name='默认定时任务时间')),
                ('is_HiddenWindowBeforeStart', models.BooleanField(default=0, verbose_name='是否启动前最小化窗口')),
                ('is_CloseBrowserBeforeStart', models.BooleanField(default=0, verbose_name='是否启动前最关闭浏览器')),
                ('is_CloseBrowserAfterEnd', models.BooleanField(default=0, verbose_name='是否结束后关闭浏览器')),
                ('is_APIcaseFileCreate', models.BooleanField(default=1, verbose_name='是否启动前生成API的py测试文件')),
                ('is_APIcaseFileRemove', models.BooleanField(default=0, verbose_name='是否结束后删除API的py测试文件')),
                ('is_ClearReportLogBeforeStart', models.BooleanField(default=0, verbose_name='是否启动前清理日志和报告')),
                ('test_integert', models.IntegerField(default=0, verbose_name='整数测试')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建日期')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新日期')),
                ('dbinfo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='public.Dbinfo', verbose_name='默认数据库')),
                ('environment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='public.Environment', verbose_name='测试环境')),
                ('log_server_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='public.LogServerinfo', verbose_name='默认日志服务器')),
            ],
            options={
                'verbose_name_plural': '测试环境信息',
            },
        ),
        migrations.AddField(
            model_name='userprofile',
            name='role',
            field=models.ManyToManyField(blank=True, help_text='<p class="text-dark small mt-1">Tips:hold down <kbd><kbd>ctrl</kbd></kbd>, to select more than one.</p>', null=True, to='public.Role', verbose_name='角色'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
